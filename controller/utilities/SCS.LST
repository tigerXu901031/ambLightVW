C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 1   


C166 COMPILER V7.00, COMPILATION OF MODULE SCS
OBJECT MODULE PLACED IN SCS.OBJ
COMPILER INVOKED BY: C:\Program Files\Keil4Inf\C166\BIN\C166.EXE SCS.c MODV2 BROWSE MODV2 DEBUG

 stmt lvl     source

    1         //****************************************************************************
    2         // @Module        Project Settings
    3         // @Filename      SCS.c
    4         // @Project       ioPlusLIN.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon XC2234L-20F66L
    7         //
    8         // @Compiler      TASKING VX-toolset
    9         //
   10         // @Codegenerator 1.2
   11         //
   12         // @Description   This file contains the SCS driver.
   13         //                      
   14         //                Note:
   15         //                This file should not be changed by 
   16         //                the user.
   17         //
   18         //----------------------------------------------------------------------------
   19         // @Date          2019/8/4 11:50:46
   20         //
   21         //****************************************************************************
   22         
   23         // USER CODE BEGIN (SCS_General,1)
   24         
   25         // USER CODE END
   26         
   27         
   28         
   29         //****************************************************************************
   30         // @Project Includes
   31         //****************************************************************************
   32         
   33         #include "MAIN.h"
*** ERROR C42 IN LINE 339 OF SCS.H: 'Scs_EnableHighPrecOsc': not in formal parameter list
*** ERROR C42 IN LINE 343 OF SCS.H: 'Scs_ApplyNewK2Div': not in formal parameter list
*** ERROR C42 IN LINE 344 OF SCS.H: 'Scs_GoFromBaseModeToNormalMode': not in formal parameter list
*** ERROR C42 IN LINE 345 OF SCS.H: 'Scs_InitTimer': not in formal parameter list
*** ERROR C42 IN LINE 348 OF SCS.H: 'Scs_RestoreTimer': not in formal parameter list
*** WARNING C34 IN LINE 379 OF SCS.H: 'inline': missing declaration specifiers
*** ERROR C42 IN LINE 379 OF SCS.H: 'inline': not in formal parameter list
*** ERROR C25 IN LINE 379 OF SCS.H: syntax error near 'void'
*** ERROR C25 IN LINE 385 OF SCS.H: syntax error near 'uword'
*** ERROR C25 IN LINE 391 OF SCS.H: syntax error near 'uword'
*** WARNING C34 IN LINE 418 OF SCS.H: 'DestPtr': missing declaration specifiers
*** ERROR C42 IN LINE 418 OF SCS.H: 'DestPtr': not in formal parameter list
*** ERROR C25 IN LINE 419 OF SCS.H: syntax error near 'const'
*** WARNING C34 IN LINE 419 OF SCS.H: 'SrcPtr': missing declaration specifiers
*** ERROR C42 IN LINE 419 OF SCS.H: 'SrcPtr': not in formal parameter list
*** ERROR C25 IN LINE 419 OF SCS.H: syntax error near 'unsigned'
*** ERROR C142 IN LINE 424 OF SCS.H: illegal initialization
*** WARNING C34 IN LINE 425 OF SCS.H: 'DestPtr': missing declaration specifiers
*** ERROR C42 IN LINE 425 OF SCS.H: 'DestPtr': not in formal parameter list
*** ERROR C25 IN LINE 425 OF SCS.H: syntax error near '++'
   34         
   35         // USER CODE BEGIN (SCS_General,2)
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 2   

   36         
   37         // USER CODE END
   38         
   39         
   40         //****************************************************************************
   41         // @Macros
   42         //****************************************************************************
   43         
   44         
   45         //****************************************************************************
   46         // @Defines
   47         //****************************************************************************
   48         
   49         // USER CODE BEGIN (SCS_General,3)
   50         
   51         // USER CODE END
   52         
   53         
   54         // Function-like macros********************************************************
   55         
   56         // SFR_COND_3: For polling an SFR condition up to 3 times; an "if" construct for
   57         // a not bit-addressable bit needs >= 12 system clock cycles before 3rd check.
   58         // Depending on the compiler (optimization) and the program location, the
   59         // effective number of instruction cycles may be higher.
   60         #define SFR_COND_3(Condition) (((Condition) && (Condition)) && (Condition))
   61         #define SFR_COND_4(Condition) (((Condition) && (Condition)) && ((Condition) && \
   62                                         (Condition)))
   63         
   64         // WAIT_COND_RETURN: Waits with T13 until condition is no more met or time is
   65         // over. If the condition is met, the function will be left with the
   66         // specified return value.
   67         #define WAIT_COND_RETURN(Condition, ReturnValue) \
   68         do{} while((Condition) && SCS_T13_RUN); \
   69         if(Condition) {return (ReturnValue);}
   70         
   71         // GET_CYCLES: Converts Time[us] and MaxSysFreq[Hz] into cycles for driver timer,
   72         // rounding up; for compile-time use only.
   73         #define GET_CYCLES(Time, MaxSysFreq) \
   74         ((unsigned int)(((((long)(Time))*((MaxSysFreq)/1000))+7999)/8000))
   75         
   76         
   77         // Constants that may be overwritten*******************************************
   78         
   79         // If not user defined:
   80         // Number of attempts for high precision oscillator start
   81         #ifndef SCS_ATTEMPTS_OSC_HP
   82         #  define SCS_ATTEMPTS_OSC_HP 10
   83         #endif
   84         
   85         // If not user defined:
   86         // Timeout in [us] for PLLV after high precision oscillator start
   87         #ifndef SCS_TIME_OSC_HP_PLLV
   88         #  define SCS_TIME_OSC_HP_PLLV 5000
   89         #endif
   90         
   91         // If not user defined:
   92         // Delay time/timeout in [us] for 1024 cycles after high precision oscillator
   93         // start
   94         #ifndef SCS_TIME_OSC_HP_1024
   95         #  define SCS_TIME_OSC_HP_1024 1000
   96         #endif
   97         
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 3   

   98         
   99         // Constants that may not be overwritten***************************************
  100         
  101         // Maximum system frequency values in [Hz] for timeout calculations
  102         #define SCS_F_INT_5MHZ_MAX                       5200000
  103         #define SCS_F_INT_10MHZ_MAX                      10400000
  104         
  105         // Times in [us]
  106         #define SCS_TIME_VCO_BAND_SWITCH                 150
  107         #define SCS_TIME_VCO_FINDIS_TO_BASE              50
  108         #define SCS_TIME_FREQ_CHANGE                     5
  109         #define SCS_TIME_VCO_LOCK                        200
  110         #define SCS_TIME_FLASH_RAMP_DOWN                 500
  111         #define SCS_TIME_FLASH_RAMP_UP                   500
  112         #define SCS_TIME_PSMSTAT                         40
  113         #define SCS_TIME_PLL_POWER_UP                    50
  114         
  115         // Driver timer cycles derived from system clock cycles, round up
  116         #define SCS_TIMER_CYCLES_GSC                     ((50000U + 7U)/8U)
  117         #define SCS_TIMER_CYCLES_PSMSTAT                 ((77U + 7U)/8U)
  118         
  119         
  120         // Constants for SCU registers*************************************************
  121         
  122         // Constants for EVRMCON0 register
  123         #define SCS_MASK_EVRMCON0_CCLEV \
  124         (3U   <<10U)  // CCLEV Current Control Level, 0(minimum)...3(maximum)
  125         
  126         // Constants for EVRMCON1 register
  127         #define SCS_MASK_EVRMCON1_HPEN \
  128         (1U   <<8U)   // HPEN High Precision Band-gap Enable
  129         
  130         // Constants for EVRMSET registers
  131         #define SCS_MASK_EVRMSET_CCDIS \
  132         (1U   <<12U)  // CCDIS Current Control Disable
  133         
  134         // Constants for GSCEN register
  135         #define SCS_MASK_GSCEN_PSCBEXEN \
  136         (1U   <<0U)   // PSCBEXEN Sequence B Exit Request Trigger Enable
  137         #define SCS_MASK_GSCEN_SW1EN \
  138         (1U   <<11U)  // SW1EN Software 1 Request Trigger Enable
  139         
  140         // Constants for GSCSTAT register
  141         #define SCS_MASK_GSCSTAT_CURRENT \
  142         (3U    <<0U)  // CURRENT currently used system mode
  143         #define SCS_MASK_GSCSTAT_CURRENT_NORMAL \
  144         (0U    <<0U)  // currently used system mode = normal
  145         #define SCS_MASK_GSCSTAT_CURRENT_CLOCK_OFF \
  146         (2U    <<0U)  // currently used system mode = clock off
  147         
  148         // Constants for GSCSWREQ register
  149         #define SCS_MASK_GSCSWREQ_SWTRG1 \
  150         (1U    <<0U)  // SWTRG1 Software Trigger 1
  151         
  152         // Constants for interrupt/trap related registers DMPMIT, DMPMITCLR, INTCLR,
  153         // INTDIS, INTSTAT
  154         #define SCS_MASK_INT_PVCMI1 \
  155         (1U   <<2U)   // PVCMI1 PVCM Interrupt Request Flag 1 (w for clear)
  156         #define SCS_MASK_INT_PVCMI2 \
  157         (1U   <<3U)   // PVCMI2 PVCM Interrupt Request Flag 2 (w for clear)
  158         #define SCS_MASK_INT_PVC1I1 \
  159         (1U   <<4U)   // PVC1I1 PVC1 Interrupt Request Flag 1 (w for clear)
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 4   

  160         #define SCS_MASK_INT_PVC1I2 \
  161         (1U   <<5U)   // PVC1I2 PVC1 Interrupt Request Flag 2 (w for clear)
  162         #define SCS_MASK_INT_WUI \
  163         (1U   <<7U)   // WUI Wake-up Timer Interrupt Request Flag (w for clear)
  164         #define SCS_MASK_INT_PVC (SCS_MASK_INT_PVCMI1 | SCS_MASK_INT_PVCMI2 | \
  165         SCS_MASK_INT_PVC1I1 | SCS_MASK_INT_PVC1I2)
  166         
  167         // Constants for KSCCFG/KSCFG registers
  168         #define SCS_MASK_KSCCFG_MODEN \
  169         (1U   <<0U)   // MODEN Module Enable
  170         #define SCS_MASK_KSCCFG_BPMODEN \
  171         (1U   <<1U)   // BPMODEN Bit Protection for MODEN, set to 1 for change (w)
  172         #define SCS_MASK_KSCCFG_BPNOM \
  173         (1U   <<7U)   // BPNOM Bit Protection for NOMCFG, set to 1 for change (w)
  174         #define SCS_MASK_KSCCFG_BPSUM \
  175         (1U   <<11U)  // BPSUM Bit Protection for SUMCFG, set to 1 for change (w)
  176         #define SCS_MASK_KSCCFG_COMCFG \
  177         (2U   <<12U)  // COMCFG Clock Off Mode Configuration
  178                       // 0: power-down request not activated, 2: activated
  179         #define SCS_MASK_KSCCFG_BPCOM \
  180         (1U   <<15U)  // BPCOM Bit Protection for COMCFG, set to 1 for change (w)
  181         
  182         // Constants for PLLCON0 register
  183         #define SCS_MASK_PLLCON0_NDIV \
  184         (0x3FU<<8U)   // NDIV N-Divider Value 16...40 for VCOSEL = 1
  185         #define SCS_MASK_PLLCON0_NACK \
  186         (1U  <<15U)   // N-Divider Ready Acknowledge
  187         #define SCS_POS_PLLCON0_NDIV 8U
  188         
  189         // Constants for PLLCON1 register
  190         #define SCS_MASK_PLLCON1_OSCSEL \
  191         (1U   <<1U)   // OSCSEL Oscillator Input Selection
  192                       // 0: external clock, 1: PLL internal clock
  193         #define SCS_MASK_PLLCON1_AOSCSEL \
  194         (1U   <<3U)   // AOSCSEL Asynchronous Oscillator Input Selection
  195                       // 0: Configuration is controlled via bit OSCSEL
  196                       // 1: PLL internal clock is selected asynchronously
  197         #define SCS_MASK_PLLCON1_PDIV \
  198         (0x0FU<<8U)   // PDIV P-Divider Value 0...15
  199         #define SCS_MASK_PLLCON1_PACK \
  200         (1U   <<15U)  // P-Divider Ready Acknowledge
  201         #define SCS_POS_PLLCON1_PDIV 8U
  202         
  203         // Constants for PLLCON2 register
  204         #define SCS_POS_PLLCON2_K1DIV 0U
  205         
  206         // Constants for PLLCON3 register
  207         #define SCS_POS_PLLCON3_K2DIV 0U
  208         
  209         // Constants for PLLSTAT register
  210         #define SCS_MASK_PLLSTAT_VCOBYST \
  211         (1U   <<0U)   // VCOBYST PLL clock derived from divider K2 (rh)
  212         #define SCS_MASK_PLLSTAT_OSCSELST \
  213         (1U   <<2U)   // OSCSELST Internal clock for PLL (rh)
  214         #define SCS_MASK_PLLSTAT_VCOLOCK \
  215         (1U   <<3U)   // VCOLOCK PLL VCO Lock Status (rh)
  216         #define SCS_MASK_PLLSTAT_PRDY \
  217         (1U   <<5U)   // PRDY P-Divider Ready Status (rh)
  218         #define SCS_MASK_PLLSTAT_NRDY \
  219         (1U   <<6U)   // PRDY N-Divider Ready Status (rh)
  220         #define SCS_MASK_PLLSTAT_K1RDY \
  221         (1U   <<7U)   // K1RDY K1-Divider Ready Status (rh)
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 5   

  222         #define SCS_MASK_PLLSTAT_K2RDY \
  223         (1U   <<8U)   // K2RDY K2-Divider Ready Status (rh)
  224         #define SCS_MASK_PLLSTAT_VCOL0 \
  225         (1U   <<10U)  // VCOL0 VCO Lock Detection Lost Status (rh)
  226         #define SCS_MASK_PLLSTAT_VCOL1 \
  227         (1U   <<11U)  // VCOL1 VCO Lock Detection Reached Status (rh)
  228         #define SCS_MASK_PLLSTAT_OSCLOCK \
  229         (1U   <<15U)  // OSCLOCK 2^11 OSC_HP cycles counted (rh)
  230         
  231         // Constants for PSCSTAT register
  232         #define SCS_MASK_PSCSTAT_PSMSTAT \
  233         (7U   <<2U)   // PSMSTAT (rh)
  234         
  235         // Constants for PVCMCON0/PVC1CON0 registers
  236         #define SCS_MASK_PVCCON_L1INTEN \
  237         (1U   <<5U)   // L1INTEN Level 1 Interrupt Request Enable
  238         #define SCS_MASK_PVCCON_L1RSTEN \
  239         (1U   <<6U)   // L1RSTEN Level 1 Reset Request Enable
  240         #define SCS_MASK_PVCCON_L1ASEN \
  241         (1U   <<7U)   // L1ASEN Level 1 Asynchronous Action Enable
  242         #define SCS_MASK_PVCCON_L2INTEN \
  243         (1U   <<13U)  // L2INTEN Level 2 Interrupt Request Enable
  244         #define SCS_MASK_PVCCON_L2RSTEN \
  245         (1U   <<14U)  // L2RSTEN Level 2 Reset Request Enable
  246         #define SCS_MASK_PVCCON_L2ASEN \
  247         (1U   <<15U)  // L2ASEN Level 2 Asynchronous Action Enable
  248         #define SCS_MASK_PVCCON_ACTIONS \
  249         (SCS_MASK_PVCCON_L1INTEN | SCS_MASK_PVCCON_L1RSTEN | SCS_MASK_PVCCON_L1ASEN | \
  250         SCS_MASK_PVCCON_L2INTEN | SCS_MASK_PVCCON_L2RSTEN | SCS_MASK_PVCCON_L2ASEN)
  251         
  252         // Constants for SEQCON register
  253         #define SCS_MASK_SEQCON_SEQATRG \
  254         (1U   <<0U)   // SEQATRG Sequence A Trigger (w)
  255                       // (A only started if B is not currently active)
  256         #define SCS_MASK_SEQCON_SEQBTRG \
  257         (1U   <<1U)   // SEQBTRG Sequence B Trigger (w)
  258                       // (B only started if A is not currently active)
  259         #define SCS_MASK_SEQCON_SEQAEN \
  260         (1U   <<2U)   // SEQAEN Sequence A Enable (rwh)
  261                       // 0: never started, 1: started if requested, cleared after A
  262         #define SCS_MASK_SEQCON_SEQBEN \
  263         (1U   <<3U)   // SEQBEN Sequence B Enable (rwh)
  264                       // 0: never started, 1: started if requested, cleared after B
  265         #define SCS_MASK_SEQCON_WUTEN \
  266         (1U   <<8U)   // WUTEN Sequence B is triggered by a WUT event
  267         #define SCS_MASK_SEQCON_ESR0EN \
  268         (1U   <<9U)   // ESR0EN Sequence B is triggered by an ESR0 event
  269         #define SCS_MASK_SEQCON_ESR1EN \
  270         (1U   <<10U)  // ESR1EN Sequence B is triggered by an ESR1 event
  271         #define SCS_MASK_SEQCON_ESR2EN \
  272         (1U   <<11U)  // ESR2EN Sequence B is triggered by an ESR2 event
  273         #define SCS_MASK_SEQCON_STM1EN \
  274         (1U   <<12U)  // STM1EN Sequence B is triggered by an STM1 event
  275         #define SCS_MASK_SEQCON_GSCBY \
  276         (1U   <<15U)  // GSCBY GSC Bypass
  277         #define SCS_POS_SEQCON_WUTEN 8U
  278         
  279         // Constants for STATCLR0 register
  280         #define SCS_MASK_STATCLR0_EMCVCO \
  281         (1U   <<13U)  // EMCVCO Clear SYSCON0.EMSVCO (w)
  282         
  283         // Constants for STATCLR1 register
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 6   

  284         #define SCS_MASK_STATCLR1_VCOL0CLR \
  285         (1U   <<0U)   // VCOL0CLR Clear PLLSTAT.VCOL0 (w)
  286         #define SCS_MASK_STATCLR1_VCOL1CLR \
  287         (1U   <<1U)   // VCOL1CLR Clear PLLSTAT.VCOL1 (w)
  288         #define SCS_MASK_STATCLR1_OSC2L1CLR \
  289         (1U   <<2U)   // OSC2L1CLR Clear HPOSCCON.OSC2L1 (w)
  290         
  291         // Constants for STATCLR1 register
  292         #define SCS_MASK_STATCLR1_SETFINDIS \
  293         (1U   <<4U)   // SETFINDIS Set PLLSTAT.FINDIS(disconnect VCO input clock) (w)
  294         #define SCS_MASK_STATCLR1_CLRFINDIS \
  295         (1U   <<5U)   // CLRFINDIS Clear PLLSTAT.FINDIS(connect VCO input clock) (w)
  296         
  297         // Constants for STMEM0 register
  298         #define SCS_MASK_STMEM0_SSFMOD \
  299         (0xFU <<7U)   // SSFMOD Flash modules activation
  300                       // 0: Startup with flash, F: Startup without flash
  301         
  302         // Constants for SWDCON0 register
  303         #define SCS_MASK_SWDCON0_L1INTEN \
  304         (1U   <<5U)   // L1INTEN Level 1 Interrupt Request Enable
  305         #define SCS_MASK_SWDCON0_L1RSTEN \
  306         (1U   <<6U)   // L1RSTEN Level 1 Reset Request Enable
  307         #define SCS_MASK_SWDCON0_L2INTEN \
  308         (1U   <<13U)  // L2INTEN Level 2 Interrupt Request Enable
  309         #define SCS_MASK_SWDCON0_L2RSTEN \
  310         (1U   <<14U)  // L2RSTEN Level 2 Reset Request Enable
  311         #define SCS_MASK_SWDCON0_ACTIONS \
  312         (SCS_MASK_SWDCON0_L1INTEN | SCS_MASK_SWDCON0_L1RSTEN | \
  313         SCS_MASK_SWDCON0_L2INTEN | SCS_MASK_SWDCON0_L2RSTEN)
  314         
  315         // Constants for SWDCON1 register
  316         #define SCS_MASK_SWDCON1_POWENSET \
  317         (1U   <<1U)   // POWENSET SWD Power Saving Mode Enable Set (w)
  318         
  319         // Constants for trap related registers TRAPCLR, TRAPDIS, TRAPSTAT, TRAPSET
  320         #define SCS_MASK_TRAP_FAT \
  321         (1U   <<0U)   // FAT Flash Access Trap Request
  322         #define SCS_MASK_TRAP_VCOLCKT \
  323         (1U   <<7U)   // VCOLCKT VCOLCK Trap Request
  324         
  325         // Constants for WUCR register
  326         #define SCS_MASK_WUCR_RUNCON_START \
  327         (1U    <<0U)  // RUNCON Field for timer start (w)
  328         #define SCS_MASK_WUCR_RUNCON_STOP \
  329         (2U    <<0U)  // RUNCON Field for timer stop (w)
  330         #define SCS_MASK_WUCR_AONCON_OFF \
  331         (2U    <<2U)  // AONCON Field for no auto-start via PSC (w)
  332         #define SCS_MASK_WUCR_ASPCON_ON \
  333         (1U    <<4U)  // ASPCON Field for auto-stop after trigger (w)
  334         #define SCS_MASK_WUCR_ASPCON_OFF \
  335         (2U    <<4U)  // ASPCON Field for no auto-stop after trigger (w)
  336         #define SCS_MASK_WUCR_CLRTRG \
  337         (1U    <<7U)  // CLRTRG Clear Trigger Bit (w)
  338         
  339         #define SCS_POS_WUCR_CLKDIV 11U
  340         
  341         // Constants for non-SCU registers *********************************************
  342         
  343         // Constants for CPUCON1 register
  344         #define SCS_POS_CPUCON1_VECSC     5U
  345         
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 7   

  346         // Constants for CCU60_TCTR0 register
  347         #define SCS_MASK_TCTR0_T13CLK \
  348         (7U    <<8U)  // T13CLK Timer T13 Input Clock Select, f = fCC6 / 2^value)
  349         #define SCS_MASK_TCTR0_T13CLK_8 \
  350         (3U    <<8U)  // T13CLK Timer T13 Input Clock Select, f = fCC6 / 2^3
  351         #define SCS_MASK_TCTR0_T13PRE \
  352         (1U    <<11U) // T13PRE Timer T13 additional prescaler enabled
  353         #define SCS_MASK_TCTR0_T13R \
  354         (1U    <<12U)  // T13R Timer T13 Run Bit (rh)
  355         #define SCS_T13_RUN (CCU60_TCTR0 & SCS_MASK_TCTR0_T13R)
  356         
  357         // Constants for CCU60_TCTR2 register
  358         #define SCS_MASK_TCTR2_T13SSC \
  359         (1U    <<1U)  // T13SSC T13 Single Shot Control
  360         #define SCS_MASK_TCTR2_T13TEC \
  361         (7U    <<2U)  // T13TEC T13 Trigger Event Control
  362         #define SCS_MASK_TCTR2_T13RSEL \
  363         (3U    <<10U) // T13RSEL T13 External Run Selection
  364         
  365         // Constants for CCU60_TCTR4 register
  366         #define SCS_MASK_TCTR4_T13RR \
  367         (1U    <<8U)  // T13RR Timer 13 Run Reset (w)
  368         #define SCS_MASK_TCTR4_T13RS \
  369         (1U    <<9U)  // T13RS Timer 13 Run Set (w)
  370         #define SCS_MASK_TCTR4_T13RES \
  371         (1U    <<10U) // T13RES Timer 13 Reset (w)
  372         #define SCS_MASK_TCTR4_T13STR \
  373         (1U    <<14U) // T13STR Timer 13 Shadow Transfer Request (w)
  374         
  375         // Constants for CCU60_PISELH register
  376         #define SCS_MASK_PISELH_ISCNT13 \
  377         (3U    <<4U)  // ISCNT13 T13 Input Select for Counting Input
  378         
  379         
  380         // Other constants*************************************************************
  381         
  382         // Right-aligned masks
  383         #define SCS_MASK_4LSB  0x000FU
  384         #define SCS_MASK_6LSB  0x003FU
  385         #define SCS_MASK_10LSB 0x03FFU
  386         
  387         // Number of K2 ramp steps
  388         #define SCS_K2_RAMP_STEPS (4U)
  389         
  390         
  391         // Check of parameters*********************************************************
  392         
  393         // Check fR
  394         #if (SCS_F_R < 4000000) || (SCS_F_R > 25000000)
              #  error "SCS_F_R out of range"
              #endif
  397         
  398         /* check fPLL target frequency */
  399         #if (SCS_F_PLL_TARGET < 1000000) || (SCS_F_PLL_TARGET > 66000000)
              #  error "SCS_F_PLL_TARGET out of range"
              #endif
  402         
  403         // Check fP
  404         #if (SCS_F_P < 4000000) || (SCS_F_P > 16000000)
              #  error"SCS_F_P out of range"
              #endif
  407         
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 8   

  408         // Check fVCO
  409         #if (SCS_F_VCO < 10000000) || (SCS_F_VCO > 160000000)
              #  error"SCS_F_VCO out of range"
              #  endif
  412         
  413         // Check P divider
  414         #if (SCS_P < 1) || (SCS_P > 16)
              #  error"SCS_P out of range"
              #endif
  417         
  418         // Check N divider
  419         #if (SCS_N < 16) || (SCS_N > 40)
              #  error  "SCS_N out of range, different SCS_P required?"
              #  endif
  422         
  423         // Check K2 dividers
  424         #if (SCS_K2 < 1) || (SCS_K2 > 512)
              #  error "SCS_K2 out of range"
              #endif
  427         #if SCS_K2_UP_1 > 512
              #  error "SCS_K2_UP_1 out of range"
              #endif
  430         #if SCS_K2_UP_2 > 512
              #  error "SCS_K2_UP_2 out of range"
              #endif
  433         #if SCS_K2_UP_3 > 512
              #  error "SCS_K2_UP_3 out of range"
              #endif
  436         #if SCS_K2_DOWN_1 > 512
              #  error "SCS_K2_DOWN_1 out of range"
              #endif
  439         #if SCS_K2_DOWN_2 > 512
              #  error "SCS_K2_DOWN_2 out of range"
              #endif
  442         #if SCS_K2_DOWN_3 > 512
              #  error "SCS_K2_DOWN_3 out of range"
              #endif
  445         #if (SCS_K2_5MHZ < 1) || (SCS_K2_5MHZ > 512)
              #  error "SCS_K2_5MHZ out of range"
              #endif
  448         #if (SCS_K2_10MHZ < 1) || (SCS_K2_10MHZ > 512)
              #  error "SCS_K2_10MHZ out of range"
              #endif
  451         
  452         
  453         //****************************************************************************
  454         // @Typedefs
  455         //****************************************************************************
  456         
  457         // Type for K2 ramp
  458         typedef struct
  459         {
  460           unsigned int K2;      // K2 step value
  461           unsigned int Delay;   // delay in timer cycles after applying K2 step
  462         } Scs_K2RampType;
  463         
  464         
  465         
  466         //****************************************************************************
  467         // @Imported Global Variables
  468         //****************************************************************************
  469         
C166 COMPILER V7.00, SCS                                                                   08/04/2019 12:21:53 PAGE 9   

  470         
  471         //****************************************************************************
  472         // @Global Variables
  473         //****************************************************************************
  474         
  475         static const Scs_K2RampType Scs_K2RampNormalUp[SCS_K2_RAMP_STEPS] =
  476         {
  477           {SCS_K2_UP_1, GET_CYCLES(SCS_TIME_FREQ_CHANGE, SCS_F_K2_UP_1_MAX)},
*** ERROR C25 IN LINE 477 OF SCS.C: syntax error near '0'
  478           {SCS_K2_UP_2, GET_CYCLES(SCS_TIME_FREQ_CHANGE, SCS_F_K2_UP_2_MAX)},
*** ERROR C25 IN LINE 478 OF SCS.C: syntax error near '8000000'
*** ERROR C25 IN LINE 478 OF SCS.C: syntax error near '66000000'
  479           {SCS_K2_UP_3, GET_CYCLES(SCS_TIME_FREQ_CHANGE, SCS_F_K2_UP_3_MAX)},
*** ERROR C25 IN LINE 479 OF SCS.C: syntax error near '8000000'
*** ERROR C25 IN LINE 479 OF SCS.C: syntax error near '66000000'
*** ERROR C7 IN LINE 479 OF SCS.C: compilation aborted

C166 COMPILATION COMPLETE.  4 WARNING(S),  22 ERROR(S)
