/****************************************************************************
**   File       :  linLdf.h
**   Controller :  Infineon XC2234L
**   LIN Version:  2.1
**   Description:  Header file for the defined LIN cluster(LIN_LDF_HFILE)
*****************************************************************************/


#ifndef linLdf_H
#define linLdf_H

/*@doc API*/

#include "COMPILER.h"
#include "LIN_CFG.h"

/*   @Topic LIN LDF Application Program Interface |
**   This section defines the interface for LIN cluster. It defines the constants
**   typedef names and function names. */


/*   @def LIN_CFG_SCHD_TIME_BASE |
**   Define the time base as defined in LDF file. This is used
**   by master interface for scheduling the frames.
**   Specify time in ms.*/

     #define LIN_CFG_SCHD_TIME_BASE  (5 + .1)

/*   @def LIN_SYS_CFG_BAUD |
**   Baud rate defined by application in LDF file.*/

     #define LIN_SYS_CFG_BAUD  19200

/*   @def LIN_SYS_CFG_NUM_OF_SIGS |
**   Total number of signals configured by application,Generated by DAvE tool.*/

     #define LIN_SYS_CFG_NUM_OF_SIGS  25

/*   @def LIN_SYS_CFG_NUM_OF_SCHD_TBL |
**   Total number of schedule tables defined in LDF file.*/

     #define LIN_SYS_CFG_NUM_OF_SCHD_TBL  1

/*   @def LIN_SYS_CFG_MAX_FRM_PER_SCH_TAB |
**   Maximum number of frame slots associated with any of the schedule table.
**   This value provided by DAvE tool.*/

     #define LIN_SYS_CFG_MAX_SLTS_PER_SCH_TAB  4

/*   @def LIN_SYS_TOTAl_NUM_FRAMES |
**   Total number of frames, value will be generated by DAvE tool.*/

     #define LIN_SYS_TOTAl_NUM_FRAMES  4

/*   @def LIN_SYS_TOTAl_FRM_BUFF_SZ |
**   Sum of lengths of all frames configured.*/

     #define LIN_SYS_TOTAl_FRM_BUFF_SZ  22

/*   @def LIN_SYS_CFG_NUM_OF_SPRDC_FRMS |
**   Number of Unconditional frames in sporadic frame, value will be generated by DAvE tool.*/

     #define LIN_SYS_CFG_NUM_OF_SPRDC_FRMS  0

/*   @def LIN_SYS_CFG_NUM_OF_EVNT_FRMS |
**   Total number of event triggered frames defined in LDF file,Generated by DAvE tool.*/

     #define LIN_SYS_CFG_NUM_OF_EVNT_FRMS  0

/*   @def LIN_SYS_CFG_MAX_FRM_PER_EVNT_FRM |
**   Maximum number of unconditional frames associated with any of the,
**   Event triggered frame.Generated by DAvE tool.*/

     #define LIN_SYS_CFG_MAX_FRM_PER_EVNT_FRM  0

/*   @def LIN_TP_N_AS_TIME  |
**   Time for transmission of the LIN frame on the transmitter side in ms.*/

     #define LIN_TP_N_AS_TIME   1000

/*   @def LIN_TP_N_CR_TIME  |
**   Time until reception of the next Consecutive Frame in ms.*/

     #define LIN_TP_N_CR_TIME   1000

/*   @enum LIN_LDF_SIG_INFO |
**   To read, write or control signals, application uses the signal name as defined in LDF file
**   configuration, LIN LLD uses the corresponding enumerated value as defined to service the
**   requested operation.Generated by DAvE tool.*/

     typedef enum
     {
        MasterReqB0=0,
        MasterReqB1=1,
        MasterReqB2=2,
        MasterReqB3=3,
        MasterReqB4=4,
        MasterReqB5=5,
        MasterReqB6=6,
        MasterReqB7=7,
        SlaveRespB0=8,
        SlaveRespB1=9,
        SlaveRespB2=10,
        SlaveRespB3=11,
        SlaveRespB4=12,
        SlaveRespB5=13,
        SlaveRespB6=14,
        SlaveRespB7=15,
        HMI_status_light_control
 = 16,
        HMI_status_lightness = 17,
        HMI_status_light_mode = 18,
        FreeMode_LightMatrix_L = 19,
        FreeMode_LightMatrix_T = 20,
        FreeMode_LightMatrix_R = 21,
        HMI_status_light_status = 22,
        HMI_status_lightness_report = 23,
        HMI_status_light_mode_report = 24
     }LIN_LDF_SIG_INFO;


/* Mapping of dynamic functions */

     #define l_u8_rd(SIGNAL) l_u8_rd_##SIGNAL()
     #define l_u8_wr(SIGNAL, A) l_u8_wr_##SIGNAL(A)

/* defines for signal access */
     #define LIN_BYTE_OFFSET_MasterReqB0    0
     #define LIN_BIT_OFFSET_MasterReqB0     0
     #define LIN_SIGNAL_SIZE_MasterReqB0    8

     #define LIN_BYTE_OFFSET_MasterReqB1    1
     #define LIN_BIT_OFFSET_MasterReqB1     0
     #define LIN_SIGNAL_SIZE_MasterReqB1    8

     #define LIN_BYTE_OFFSET_MasterReqB2    2
     #define LIN_BIT_OFFSET_MasterReqB2     0
     #define LIN_SIGNAL_SIZE_MasterReqB2    8

     #define LIN_BYTE_OFFSET_MasterReqB3    3
     #define LIN_BIT_OFFSET_MasterReqB3     0
     #define LIN_SIGNAL_SIZE_MasterReqB3    8

     #define LIN_BYTE_OFFSET_MasterReqB4    4
     #define LIN_BIT_OFFSET_MasterReqB4     0
     #define LIN_SIGNAL_SIZE_MasterReqB4    8

     #define LIN_BYTE_OFFSET_MasterReqB5    5
     #define LIN_BIT_OFFSET_MasterReqB5     0
     #define LIN_SIGNAL_SIZE_MasterReqB5    8

     #define LIN_BYTE_OFFSET_MasterReqB6    6
     #define LIN_BIT_OFFSET_MasterReqB6     0
     #define LIN_SIGNAL_SIZE_MasterReqB6    8

     #define LIN_BYTE_OFFSET_MasterReqB7    7
     #define LIN_BIT_OFFSET_MasterReqB7     0
     #define LIN_SIGNAL_SIZE_MasterReqB7    8

     #define LIN_BYTE_OFFSET_SlaveRespB0    0
     #define LIN_BIT_OFFSET_SlaveRespB0     0
     #define LIN_SIGNAL_SIZE_SlaveRespB0    8

     #define LIN_BYTE_OFFSET_SlaveRespB1    1
     #define LIN_BIT_OFFSET_SlaveRespB1     0
     #define LIN_SIGNAL_SIZE_SlaveRespB1    8

     #define LIN_BYTE_OFFSET_SlaveRespB2    2
     #define LIN_BIT_OFFSET_SlaveRespB2     0
     #define LIN_SIGNAL_SIZE_SlaveRespB2    8

     #define LIN_BYTE_OFFSET_SlaveRespB3    3
     #define LIN_BIT_OFFSET_SlaveRespB3     0
     #define LIN_SIGNAL_SIZE_SlaveRespB3    8

     #define LIN_BYTE_OFFSET_SlaveRespB4    4
     #define LIN_BIT_OFFSET_SlaveRespB4     0
     #define LIN_SIGNAL_SIZE_SlaveRespB4    8

     #define LIN_BYTE_OFFSET_SlaveRespB5    5
     #define LIN_BIT_OFFSET_SlaveRespB5     0
     #define LIN_SIGNAL_SIZE_SlaveRespB5    8

     #define LIN_BYTE_OFFSET_SlaveRespB6    6
     #define LIN_BIT_OFFSET_SlaveRespB6     0
     #define LIN_SIGNAL_SIZE_SlaveRespB6    8

     #define LIN_BYTE_OFFSET_SlaveRespB7    7
     #define LIN_BIT_OFFSET_SlaveRespB7     0
     #define LIN_SIGNAL_SIZE_SlaveRespB7    8

/* static access macros for signalLIN_SIGNAL_MasterReqB0 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB0() l_u8_rd_MasterReqB0()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB0(A) l_u8_wr_MasterReqB0(A)

     #define l_u8_rd_MasterReqB0() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB0] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB0)- 1) \
     << LIN_BIT_OFFSET_MasterReqB0)) >> LIN_BIT_OFFSET_MasterReqB0); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB0(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB0] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB0] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB0) - 1) \
     << LIN_BIT_OFFSET_MasterReqB0))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB0) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB0); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_MasterReqB1 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB1() l_u8_rd_MasterReqB1()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB1(A) l_u8_wr_MasterReqB1(A)

     #define l_u8_rd_MasterReqB1() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB1] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB1)- 1) \
     << LIN_BIT_OFFSET_MasterReqB1)) >> LIN_BIT_OFFSET_MasterReqB1); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB1(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB1] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB1] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB1) - 1) \
     << LIN_BIT_OFFSET_MasterReqB1))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB1) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB1); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_MasterReqB2 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB2() l_u8_rd_MasterReqB2()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB2(A) l_u8_wr_MasterReqB2(A)

     #define l_u8_rd_MasterReqB2() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB2] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB2)- 1) \
     << LIN_BIT_OFFSET_MasterReqB2)) >> LIN_BIT_OFFSET_MasterReqB2); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB2(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB2] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB2] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB2) - 1) \
     << LIN_BIT_OFFSET_MasterReqB2))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB2) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB2); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_MasterReqB3 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB3() l_u8_rd_MasterReqB3()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB3(A) l_u8_wr_MasterReqB3(A)

     #define l_u8_rd_MasterReqB3() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB3] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB3)- 1) \
     << LIN_BIT_OFFSET_MasterReqB3)) >> LIN_BIT_OFFSET_MasterReqB3); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB3(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB3] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB3] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB3) - 1) \
     << LIN_BIT_OFFSET_MasterReqB3))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB3) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB3); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_MasterReqB4 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB4() l_u8_rd_MasterReqB4()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB4(A) l_u8_wr_MasterReqB4(A)

     #define l_u8_rd_MasterReqB4() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB4] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB4)- 1) \
     << LIN_BIT_OFFSET_MasterReqB4)) >> LIN_BIT_OFFSET_MasterReqB4); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB4(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB4] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB4] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB4) - 1) \
     << LIN_BIT_OFFSET_MasterReqB4))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB4) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB4); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_MasterReqB5 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB5() l_u8_rd_MasterReqB5()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB5(A) l_u8_wr_MasterReqB5(A)

     #define l_u8_rd_MasterReqB5() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB5] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB5)- 1) \
     << LIN_BIT_OFFSET_MasterReqB5)) >> LIN_BIT_OFFSET_MasterReqB5); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB5(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB5] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB5] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB5) - 1) \
     << LIN_BIT_OFFSET_MasterReqB5))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB5) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB5); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_MasterReqB6 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB6() l_u8_rd_MasterReqB6()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB6(A) l_u8_wr_MasterReqB6(A)

     #define l_u8_rd_MasterReqB6() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB6] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB6)- 1) \
     << LIN_BIT_OFFSET_MasterReqB6)) >> LIN_BIT_OFFSET_MasterReqB6); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB6(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB6] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB6] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB6) - 1) \
     << LIN_BIT_OFFSET_MasterReqB6))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB6) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB6); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_MasterReqB7 */
     #define l_u8_rd_LIN_SIGNAL_MasterReqB7() l_u8_rd_MasterReqB7()
     #define l_u8_wr_LIN_SIGNAL_MasterReqB7(A) l_u8_wr_MasterReqB7(A)

     #define l_u8_rd_MasterReqB7() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_MasterReqB7] & \
     (((1U << LIN_SIGNAL_SIZE_MasterReqB7)- 1) \
     << LIN_BIT_OFFSET_MasterReqB7)) >> LIN_BIT_OFFSET_MasterReqB7); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_MasterReqB7(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB7] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_MasterReqB7] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_MasterReqB7) - 1) \
     << LIN_BIT_OFFSET_MasterReqB7))))  | \
     ((((1U << LIN_SIGNAL_SIZE_MasterReqB7) - 1) & (A)) \
     << LIN_BIT_OFFSET_MasterReqB7); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB0 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB0() l_u8_rd_SlaveRespB0()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB0(A) l_u8_wr_SlaveRespB0(A)

     #define l_u8_rd_SlaveRespB0() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB0] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB0)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB0)) >> LIN_BIT_OFFSET_SlaveRespB0); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB0(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB0] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB0] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB0) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB0))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB0) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB0); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB1 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB1() l_u8_rd_SlaveRespB1()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB1(A) l_u8_wr_SlaveRespB1(A)

     #define l_u8_rd_SlaveRespB1() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB1] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB1)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB1)) >> LIN_BIT_OFFSET_SlaveRespB1); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB1(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB1] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB1] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB1) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB1))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB1) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB1); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB2 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB2() l_u8_rd_SlaveRespB2()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB2(A) l_u8_wr_SlaveRespB2(A)

     #define l_u8_rd_SlaveRespB2() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB2] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB2)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB2)) >> LIN_BIT_OFFSET_SlaveRespB2); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB2(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB2] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB2] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB2) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB2))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB2) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB2); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB3 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB3() l_u8_rd_SlaveRespB3()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB3(A) l_u8_wr_SlaveRespB3(A)

     #define l_u8_rd_SlaveRespB3() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB3] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB3)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB3)) >> LIN_BIT_OFFSET_SlaveRespB3); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB3(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB3] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB3] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB3) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB3))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB3) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB3); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB4 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB4() l_u8_rd_SlaveRespB4()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB4(A) l_u8_wr_SlaveRespB4(A)

     #define l_u8_rd_SlaveRespB4() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB4] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB4)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB4)) >> LIN_BIT_OFFSET_SlaveRespB4); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB4(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB4] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB4] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB4) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB4))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB4) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB4); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB5 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB5() l_u8_rd_SlaveRespB5()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB5(A) l_u8_wr_SlaveRespB5(A)

     #define l_u8_rd_SlaveRespB5() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB5] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB5)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB5)) >> LIN_BIT_OFFSET_SlaveRespB5); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB5(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB5] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB5] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB5) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB5))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB5) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB5); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB6 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB6() l_u8_rd_SlaveRespB6()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB6(A) l_u8_wr_SlaveRespB6(A)

     #define l_u8_rd_SlaveRespB6() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB6] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB6)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB6)) >> LIN_BIT_OFFSET_SlaveRespB6); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB6(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB6] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB6] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB6) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB6))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB6) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB6); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


/* static access macros for signalLIN_SIGNAL_SlaveRespB7 */
     #define l_u8_rd_LIN_SIGNAL_SlaveRespB7() l_u8_rd_SlaveRespB7()
     #define l_u8_wr_LIN_SIGNAL_SlaveRespB7(A) l_u8_wr_SlaveRespB7(A)

     #define l_u8_rd_SlaveRespB7() \
     ((Lin_DiagRxFifo[Lin_DiagRxFifoRdIdx][LIN_BYTE_OFFSET_SlaveRespB7] & \
     (((1U << LIN_SIGNAL_SIZE_SlaveRespB7)- 1) \
     << LIN_BIT_OFFSET_SlaveRespB7)) >> LIN_BIT_OFFSET_SlaveRespB7); \
     Lin_DiagRxFifoRdIdx ++ ;  \
     if ( Lin_DiagRxFifoRdIdx >= _DGNSTC_RBUFF_SZ ) \
     { Lin_DiagRxFifoRdIdx = 0; }

     #define l_u8_wr_SlaveRespB7(A) \
     do {Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB7] = \
     (Lin_DiagTxFifo[Lin_DiagTxFifoWrIdx][LIN_BYTE_OFFSET_SlaveRespB7] & \
     ((uint8) (~(((1U << LIN_SIGNAL_SIZE_SlaveRespB7) - 1) \
     << LIN_BIT_OFFSET_SlaveRespB7))))  | \
     ((((1U << LIN_SIGNAL_SIZE_SlaveRespB7) - 1) & (A)) \
     << LIN_BIT_OFFSET_SlaveRespB7); \
     } while(0);\
     Lin_DiagTxFifoWrIdx ++;\
     if ( Lin_DiagTxFifoWrIdx >= _DGNSTC_TBUFF_SZ ) \
     { Lin_DiagTxFifoWrIdx =  0; }


     #define LIN_BYTE_OFFSET_HMI_status_light_control
   0
     #define LIN_BIT_OFFSET_HMI_status_light_control
    0
     #define LIN_SIGNAL_SIZE_HMI_status_light_control
   1

/* static access macros for signalLIN_SIGNAL_HMI_status_light_control
 */
     #define l_u8_rd_LIN_SIGNAL_HMI_status_light_control
() \
     l_u8_rd_HMI_status_light_control
()
     #define l_u8_wr_LIN_SIGNAL_HMI_status_light_control
(A) \
     l_u8_wr_HMI_status_light_control
(A)

     #define l_u8_rd_HMI_status_light_control
()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_control
] & \
        (((1U << LIN_SIGNAL_SIZE_HMI_status_light_control
) - 1) \
        << LIN_BIT_OFFSET_HMI_status_light_control
 )) \
        >> LIN_BIT_OFFSET_HMI_status_light_control
)

     #define l_u8_wr_HMI_status_light_control
(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_control
] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_control
] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_HMI_status_light_control
) - 1) \
           << LIN_BIT_OFFSET_HMI_status_light_control
))))  | \
           ((((1U << LIN_SIGNAL_SIZE_HMI_status_light_control
) - 1) & (A)) \
           << LIN_BIT_OFFSET_HMI_status_light_control
);\
           Lin_FrmDataUpdtFlag[0 >> 3] |= ( 1 << (0 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_HMI_status_lightness   0
     #define LIN_BIT_OFFSET_HMI_status_lightness    4
     #define LIN_SIGNAL_SIZE_HMI_status_lightness   2

/* static access macros for signalLIN_SIGNAL_HMI_status_lightness */
     #define l_u8_rd_LIN_SIGNAL_HMI_status_lightness() \
     l_u8_rd_HMI_status_lightness()
     #define l_u8_wr_LIN_SIGNAL_HMI_status_lightness(A) \
     l_u8_wr_HMI_status_lightness(A)

     #define l_u8_rd_HMI_status_lightness()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_lightness] & \
        (((1U << LIN_SIGNAL_SIZE_HMI_status_lightness) - 1) \
        << LIN_BIT_OFFSET_HMI_status_lightness )) \
        >> LIN_BIT_OFFSET_HMI_status_lightness)

     #define l_u8_wr_HMI_status_lightness(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_lightness] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_lightness] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_HMI_status_lightness) - 1) \
           << LIN_BIT_OFFSET_HMI_status_lightness))))  | \
           ((((1U << LIN_SIGNAL_SIZE_HMI_status_lightness) - 1) & (A)) \
           << LIN_BIT_OFFSET_HMI_status_lightness);\
           Lin_FrmDataUpdtFlag[0 >> 3] |= ( 1 << (0 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_HMI_status_light_mode   1
     #define LIN_BIT_OFFSET_HMI_status_light_mode    0
     #define LIN_SIGNAL_SIZE_HMI_status_light_mode   8

/* static access macros for signalLIN_SIGNAL_HMI_status_light_mode */
     #define l_u8_rd_LIN_SIGNAL_HMI_status_light_mode() \
     l_u8_rd_HMI_status_light_mode()
     #define l_u8_wr_LIN_SIGNAL_HMI_status_light_mode(A) \
     l_u8_wr_HMI_status_light_mode(A)

     #define l_u8_rd_HMI_status_light_mode()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_mode] & \
        (((1U << LIN_SIGNAL_SIZE_HMI_status_light_mode) - 1) \
        << LIN_BIT_OFFSET_HMI_status_light_mode )) \
        >> LIN_BIT_OFFSET_HMI_status_light_mode)

     #define l_u8_wr_HMI_status_light_mode(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_mode] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_mode] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_HMI_status_light_mode) - 1) \
           << LIN_BIT_OFFSET_HMI_status_light_mode))))  | \
           ((((1U << LIN_SIGNAL_SIZE_HMI_status_light_mode) - 1) & (A)) \
           << LIN_BIT_OFFSET_HMI_status_light_mode);\
           Lin_FrmDataUpdtFlag[0 >> 3] |= ( 1 << (0 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_FreeMode_LightMatrix_L   2
     #define LIN_BIT_OFFSET_FreeMode_LightMatrix_L    0
     #define LIN_SIGNAL_SIZE_FreeMode_LightMatrix_L   4

/* static access macros for signalLIN_SIGNAL_FreeMode_LightMatrix_L */
     #define l_u8_rd_LIN_SIGNAL_FreeMode_LightMatrix_L() \
     l_u8_rd_FreeMode_LightMatrix_L()
     #define l_u8_wr_LIN_SIGNAL_FreeMode_LightMatrix_L(A) \
     l_u8_wr_FreeMode_LightMatrix_L(A)

     #define l_u8_rd_FreeMode_LightMatrix_L()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_L] & \
        (((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_L) - 1) \
        << LIN_BIT_OFFSET_FreeMode_LightMatrix_L )) \
        >> LIN_BIT_OFFSET_FreeMode_LightMatrix_L)

     #define l_u8_wr_FreeMode_LightMatrix_L(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_L] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_L] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_L) - 1) \
           << LIN_BIT_OFFSET_FreeMode_LightMatrix_L))))  | \
           ((((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_L) - 1) & (A)) \
           << LIN_BIT_OFFSET_FreeMode_LightMatrix_L);\
           Lin_FrmDataUpdtFlag[0 >> 3] |= ( 1 << (0 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_FreeMode_LightMatrix_T   2
     #define LIN_BIT_OFFSET_FreeMode_LightMatrix_T    4
     #define LIN_SIGNAL_SIZE_FreeMode_LightMatrix_T   4

/* static access macros for signalLIN_SIGNAL_FreeMode_LightMatrix_T */
     #define l_u8_rd_LIN_SIGNAL_FreeMode_LightMatrix_T() \
     l_u8_rd_FreeMode_LightMatrix_T()
     #define l_u8_wr_LIN_SIGNAL_FreeMode_LightMatrix_T(A) \
     l_u8_wr_FreeMode_LightMatrix_T(A)

     #define l_u8_rd_FreeMode_LightMatrix_T()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_T] & \
        (((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_T) - 1) \
        << LIN_BIT_OFFSET_FreeMode_LightMatrix_T )) \
        >> LIN_BIT_OFFSET_FreeMode_LightMatrix_T)

     #define l_u8_wr_FreeMode_LightMatrix_T(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_T] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_T] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_T) - 1) \
           << LIN_BIT_OFFSET_FreeMode_LightMatrix_T))))  | \
           ((((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_T) - 1) & (A)) \
           << LIN_BIT_OFFSET_FreeMode_LightMatrix_T);\
           Lin_FrmDataUpdtFlag[0 >> 3] |= ( 1 << (0 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_FreeMode_LightMatrix_R   3
     #define LIN_BIT_OFFSET_FreeMode_LightMatrix_R    0
     #define LIN_SIGNAL_SIZE_FreeMode_LightMatrix_R   4

/* static access macros for signalLIN_SIGNAL_FreeMode_LightMatrix_R */
     #define l_u8_rd_LIN_SIGNAL_FreeMode_LightMatrix_R() \
     l_u8_rd_FreeMode_LightMatrix_R()
     #define l_u8_wr_LIN_SIGNAL_FreeMode_LightMatrix_R(A) \
     l_u8_wr_FreeMode_LightMatrix_R(A)

     #define l_u8_rd_FreeMode_LightMatrix_R()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_R] & \
        (((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_R) - 1) \
        << LIN_BIT_OFFSET_FreeMode_LightMatrix_R )) \
        >> LIN_BIT_OFFSET_FreeMode_LightMatrix_R)

     #define l_u8_wr_FreeMode_LightMatrix_R(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_R] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_FreeMode_LightMatrix_R] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_R) - 1) \
           << LIN_BIT_OFFSET_FreeMode_LightMatrix_R))))  | \
           ((((1U << LIN_SIGNAL_SIZE_FreeMode_LightMatrix_R) - 1) & (A)) \
           << LIN_BIT_OFFSET_FreeMode_LightMatrix_R);\
           Lin_FrmDataUpdtFlag[0 >> 3] |= ( 1 << (0 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_HMI_status_light_status   4
     #define LIN_BIT_OFFSET_HMI_status_light_status    0
     #define LIN_SIGNAL_SIZE_HMI_status_light_status   2

/* static access macros for signalLIN_SIGNAL_HMI_status_light_status */
     #define l_u8_rd_LIN_SIGNAL_HMI_status_light_status() \
     l_u8_rd_HMI_status_light_status()
     #define l_u8_wr_LIN_SIGNAL_HMI_status_light_status(A) \
     l_u8_wr_HMI_status_light_status(A)

     #define l_u8_rd_HMI_status_light_status()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_status] & \
        (((1U << LIN_SIGNAL_SIZE_HMI_status_light_status) - 1) \
        << LIN_BIT_OFFSET_HMI_status_light_status )) \
        >> LIN_BIT_OFFSET_HMI_status_light_status)

     #define l_u8_wr_HMI_status_light_status(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_status] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_status] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_HMI_status_light_status) - 1) \
           << LIN_BIT_OFFSET_HMI_status_light_status))))  | \
           ((((1U << LIN_SIGNAL_SIZE_HMI_status_light_status) - 1) & (A)) \
           << LIN_BIT_OFFSET_HMI_status_light_status);\
           Lin_FrmDataUpdtFlag[1 >> 3] |= ( 1 << (1 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_HMI_status_lightness_report   4
     #define LIN_BIT_OFFSET_HMI_status_lightness_report    2
     #define LIN_SIGNAL_SIZE_HMI_status_lightness_report   2

/* static access macros for signalLIN_SIGNAL_HMI_status_lightness_report */
     #define l_u8_rd_LIN_SIGNAL_HMI_status_lightness_report() \
     l_u8_rd_HMI_status_lightness_report()
     #define l_u8_wr_LIN_SIGNAL_HMI_status_lightness_report(A) \
     l_u8_wr_HMI_status_lightness_report(A)

     #define l_u8_rd_HMI_status_lightness_report()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_lightness_report] & \
        (((1U << LIN_SIGNAL_SIZE_HMI_status_lightness_report) - 1) \
        << LIN_BIT_OFFSET_HMI_status_lightness_report )) \
        >> LIN_BIT_OFFSET_HMI_status_lightness_report)

     #define l_u8_wr_HMI_status_lightness_report(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_lightness_report] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_lightness_report] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_HMI_status_lightness_report) - 1) \
           << LIN_BIT_OFFSET_HMI_status_lightness_report))))  | \
           ((((1U << LIN_SIGNAL_SIZE_HMI_status_lightness_report) - 1) & (A)) \
           << LIN_BIT_OFFSET_HMI_status_lightness_report);\
           Lin_FrmDataUpdtFlag[1 >> 3] |= ( 1 << (1 & 0x07)); \
           } while(0)

     #define LIN_BYTE_OFFSET_HMI_status_light_mode_report   5
     #define LIN_BIT_OFFSET_HMI_status_light_mode_report    0
     #define LIN_SIGNAL_SIZE_HMI_status_light_mode_report   8

/* static access macros for signalLIN_SIGNAL_HMI_status_light_mode_report */
     #define l_u8_rd_LIN_SIGNAL_HMI_status_light_mode_report() \
     l_u8_rd_HMI_status_light_mode_report()
     #define l_u8_wr_LIN_SIGNAL_HMI_status_light_mode_report(A) \
     l_u8_wr_HMI_status_light_mode_report(A)

     #define l_u8_rd_HMI_status_light_mode_report()  \
        ((Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_mode_report] & \
        (((1U << LIN_SIGNAL_SIZE_HMI_status_light_mode_report) - 1) \
        << LIN_BIT_OFFSET_HMI_status_light_mode_report )) \
        >> LIN_BIT_OFFSET_HMI_status_light_mode_report)

     #define l_u8_wr_HMI_status_light_mode_report(A) \
        do {Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_mode_report] = \
           (Lin_FrmData[LIN_BYTE_OFFSET_HMI_status_light_mode_report] & \
           ((uint8) (~(((1U << LIN_SIGNAL_SIZE_HMI_status_light_mode_report) - 1) \
           << LIN_BIT_OFFSET_HMI_status_light_mode_report))))  | \
           ((((1U << LIN_SIGNAL_SIZE_HMI_status_light_mode_report) - 1) & (A)) \
           << LIN_BIT_OFFSET_HMI_status_light_mode_report);\
           Lin_FrmDataUpdtFlag[1 >> 3] |= ( 1 << (1 & 0x07)); \
           } while(0)

/*   type l_signal_handle |
**   Used as an alias to read, write or control signal information.*/

     typedef  LIN_LDF_SIG_INFO l_signal_handle;

/*   @enum LIN_FRM_TYPE |
**   Defines the type of LIN frame.*/

     typedef enum
     {
        LIN_FRM_UNCD  = 0,         /*@enum Unconditional frame*/
        LIN_FRM_EVNT  = 1,         /*@enum Event triggered frame.*/
        LIN_FRM_SPRDC = 2          /*@enum Sporadic frame.*/
     }LIN_FRM_TYPE;

/*   @struct LIN_EVNT_FRM_INFO |
**   Provide the event triggered frames details. This information used in case of collisions.
**   Master set the collision flag in corresponding slot when collision occurs,
**   in the following slots associated unconditional frames are published by
**   master until all associated unconditional frames are published.
**   At the end master reset the collision flag.*/

     typedef struct
     {
        uint8 frm_id;                /*@field Event triggered frame ID.*/
        uint8 max_num_of_uncd_frms;  /*@field Number of unconditional frames are associated with this
                                             event triggered frame*/
        uint8 asctd_uncd_frm_ids[1]; /*@field Unconditional frame IDs associated with this
                                             event triggered frame.*/
        /* In LDF_Frame page, Event triggered frames not configured with UNCD frames. */
     }LIN_EVNT_FRM_INFO;


/*   @struct tassctd_frm_info |
**   Includes the details of each schedule table member */

     typedef struct
     {
        uint8         frm_id;         /*@field Frame ID, in case of unconditional or event triggered frame.
                                             For sporadic frame the value will be 0 (zero). */
        uint8         slot_time;      /*@field Slot timeout period in ms*/
        LIN_FRM_TYPE frm_type;       /*@field Frame type (unconditional, event triggered or sporadic)*/
     }tassctd_frm_info;

/*   @struct LIN_SYS_SCHD_INFO |
**   Define the schedule table information such as the number of frame slots 
**   and frame ID associated with each slot.*/

     typedef struct
     {
        uint8   num_slots_ascted;         /*@field Total number of frame slots with current schedule table.*/
        tassctd_frm_info assctd_frm_info[LIN_SYS_CFG_MAX_SLTS_PER_SCH_TAB]; 
                                         /*@field Associated frame details */
     }LIN_SYS_SCHD_INFO;

     /* @type LIN_EVNT_FRM_INFO Lin_EvntSchTbl[] not defined, Because */
     /* In LDF_Frame page, Event triggered frames are not configured. */

/*   @type Lin_FrmInfo |
**   Every byte of Lin_FrmInfo represents the frame properties
**   i.e. Lin_FrmInfo[0] --> represents the LIN_sys_frm_tbl[0] properties
**        Lin_FrmInfo[1] --> represents the LIN_sys_frm_tbl[1] properties
**   And the each frame properties represented as follows  V T O RR LLL .
**   V --> (Validity) Frame is registered as publisher/subscriber
**      0--> Frame is not registered (may be event triggered frame)
**      1--> Frame is registered
**   T --> Transfer type
**      0 --> Subscriber
**      1 --> Publisher
**   O --> Offset of frame data in Lin_FrmData buffer
**         The unsigned character is used for offset to save the memory usage.
**         By using unsigned character only 256 bytes can be accessed directly.
**         To access all 64 frames data (64 frames * 8 bytes = 512 bytes) 8 bit
**         offset pointer is not sufficient. So this value is used to add an
**         additional 256 (from base location of Lin_FrmData)to the existing offset.
**   RR --> Reserved
**   LLL --> Length of the frame (LLL + 1) */

     extern uint8 Lin_FrmInfo[];

/*   @type Lin_FrmOffset |
**   Specifies the offset of frame data location in Lin_FrmData and this
**   is used only incase of pointer to buffer is used. If frame is neither a
**   publisher or subscriber then the value is ignored by LLD and length of 
**   this frame is not included in the total length of buffer required by
**   this interface (LIN_SYS_TOTAl_FRM_BUFF_SZ). the offset mentioned for each
**   frame is related with frame ID zero. Incase offset exceeds 255, 255 is 
**   subtracted from the offset and offset bit will be set in Lin_FrmInfo
**   data structure.*/

     extern uint8 Lin_FrmOffset[];

/*   @typedef Lin_FrmTbl |
**   The data structure defines the Frame Table*/

     extern uint8 Lin_FrmTbl[4];

/*   This is used to refer Lin_FrmDataUpdtFlag, Lin_BufferDataLost
**     and Lin_BufferInUse.*/

     #define LIN_SYS_NUM_FRMS                     4

/*   The following defines are used by LIN LLD to refer the data encoded in
**   Lin_FrmInfo and not exported to application.*/

     #define LIN_SYS_FRM_INFO_REG_ID_MSK      0x80
     #define LIN_SYS_FRM_INFO_PBLSHR_MSK      0x40
     #define LIN_SYS_FRM_INFO_LEN_MASK        0x07
     #define LIN_SYS_FRM_INFO_OFFSET_MSK      0x20

/*   The buffer contains the frame data at their particular offset indicated by
**   LIN_sys_frm_offset.

**   8 more bytes are used to store the data temporarily incase master
**   publishes the event triggered frame and current interface is not the
**   publisher. So by default the interface is subscribed to the event
**   triggered frame and updates the received data ,after receiving full
**   frame the LLD_sys_frm_data[LIN_SYS_TOTAl_FRM_BUFF_SZ]
**   value is verified for the subscriber status and update frame buffer.
**   accordingly. */

     extern uint8 Lin_FrmData[LIN_SYS_TOTAl_FRM_BUFF_SZ + 8];

/*   The following defines are used by LIN LLD to refer the data encoded in
**   Lin_FrmInfo and not exported to application.
**   e.g.
**   LIN v2.0
**   i.e. LLD_frm_data_updt_flg[0] 0th bit--> represents the
**   frame ID 0 (0x80) properties
**   LLD_frm_data_updt_flg[0] 1st bit --> represents the
**   frame ID 1 (0xC1) properties

**   LIN v2.1
**   i.e. LLD_frm_data_updt_flg[0] 0th bit--> represents the
**   LIN_sys_frm_tbl[0] properties
**   LLD_frm_data_updt_flg[0] 1st bit --> represents the
**   LIN_sys_frm_tbl[1] properties */

     extern uint8 Lin_FrmDataUpdtFlag[(LIN_SYS_NUM_FRMS >> 3) + 1];

/*   The LDF file have the init data for each frame, this data shall always be
**   used by nodes till it get the updated data from application/user (refer
**   9.2.3.1 standard signal section of LIN spec v2.1). This flag is used in
**   relation to LLD_frm_data_updt_flg.
**   LLD_frm_data_init_flg = 1 --> Init data will be used by slaves
**   LLD_frm_data_init_flg = 0 --> slaves has updated data from application,
**   and updated data will be used. This is reset in LIN_frame_wr API. */

     extern uint8 Lin_FrmDataInitFlag[(LIN_SYS_NUM_FRMS >> 3) + 1];


     #endif  /* #ifndef linLdf_H */
